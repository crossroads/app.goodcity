# Required environment variables
# CODECLIMATE_REPO_TOKEN      - for reporting code climate statistics
# ROLLBAR_ACCESS_TOKEN        - for reporting code deployments
# GOODCITY_KEYSTORE_PASSWORD  - password for goodcity.keystore file
# GOOGLE_PLAY_KEY_FILE        - private key for Fastlane to upload to Google Play Store
# AZURE_HOST                  - URL of azure storage blob
# AZURE_SHARE                 - Name of share inside Azure storage blob
# AZURE_SAS_TOKEN             - Access token for Azure storage blob

version: 2

aliases:

  - defaults: &defaults
      docker:
        - image: circleci/node:boron
      working_directory: ~/code

  - &restore-repo-cache
      key: v1-repo-{{ .Environment.CIRCLE_SHA1 }}

  - &restore-yarn-cache
      keys:
        - v1-yarn-packages-{{ checksum "yarn.lock" }}
  - &save-yarn-cache
      key: v1-yarn-packages-{{ checksum "yarn.lock" }}
      paths:
        - node_modules
        - ~/.cache/yarn
  - &yarn
    |
      yarn install --non-interactive --cache-folder ~/.cache/yarn --frozen-lockfile

  - &restore-bower-cache
      key: v1-bower-components-{{ checksum "bower.json" }}
  - &save-bower-cache
      key: v1-bower-components-{{ checksum "bower.json" }}
      paths:
        - bower_components

  - &restore-bundler-cache
      key: v1-bundle-{{ checksum "Gemfile.lock" }}
  - &save-bundler-cache
      key: v1-bundle-{{ checksum "Gemfile.lock" }}
      paths:
        - vendor/bundle

jobs:
  checkout_code:
    <<: *defaults
    steps:
      - checkout
      - save_cache:
          key: v1-repo-{{ .Environment.CIRCLE_SHA1 }}
          paths:
            - ~/code

  package_dependencies:
    <<: *defaults
    steps:
      - restore-cache: *restore-repo-cache
      - restore-cache: *restore-yarn-cache
      - run: *yarn
      - save-cache: *save-yarn-cache
      - restore-cache: *restore-bower-cache
      - run: yarn run bower install
      - save-cache: *save-bower-cache

  tests:
    <<: *defaults
    steps:
      - restore-cache: *restore-repo-cache
      - restore-cache: *restore-yarn-cache
      - restore-cache: *restore-bower-cache
      - run:
          name: Start Ember test server
          command: yarn run ember server --port 4200
          background: true
      - run:
          name: Wait for Ember test server to start
          command: dockerize -wait tcp://localhost:4200 -timeout 1m
      - run:
          name: Run Ember tests
          command: COVERAGE=true yarn run ember test
      - persist_to_workspace:
          root: .
          paths:
            - coverage*/lcov.info

  upload-coverage:
    <<: *defaults
    steps:
      - restore-cache: *restore-repo-cache
      - restore-cache: *restore-yarn-cache
      - restore-cache: *restore-bower-cache
      - attach_workspace:
          at: ~/code
      - run:
          name: Upload coverage results to Code Climate
          command: |
            yarn run codeclimate-test-reporter < coverage*/lcov.info

  ember_cordova_build:
    <<: *defaults
    environment:
        EMBER_CLI_CORDOVA: "1"
    steps:
      - restore-cache: *restore-repo-cache
      - restore-cache: *restore-yarn-cache
      - restore-cache: *restore-bower-cache
      - run:
          name: Setup Environment variables
          command: |
            echo 'export APP_SHA=$(echo $CIRCLE_SHA1 | cut -c1-7)' >> $BASH_ENV
            echo 'if [ -z "$APP_SHARED_SHA" ]; then export APP_SHARED_SHA=$( git ls-remote --heads https://github.com/crossroads/shared.goodcity.git $CIRCLE_BRANCH | cut -c1-7); fi' >> $BASH_ENV
            echo 'if [ -z "$APP_SHARED_SHA" ]; then export APP_SHARED_SHA=$( git ls-remote --heads https://github.com/crossroads/shared.goodcity.git master | cut -c1-7); fi' >> $BASH_ENV
            echo 'export staging=$(if [ "$CIRCLE_BRANCH" == "live" ]; then echo false; else echo true; fi)' >> $BASH_ENV
            echo 'export APP_VERSION=$(jq -r ".version" package.json)' >> $BASH_ENV
      - run:
          name: Print Environment Variables
          command: |
            echo EMBER_CLI_CORDOVA=$EMBER_CLI_CORDOVA
            echo APP_SHA=$APP_SHA
            echo APP_SHARED_SHA=$APP_SHARED_SHA
            echo staging=$staging
            echo APP_VERSION=$APP_VERSION
      - run: yarn run ember build --environment=production
      - run: mv dist/ ~/code/cordova/dist
      - persist_to_workspace:
          root: .
          paths:
            - ~/code/cordova/dist

  android_build:
    <<: *defaults
    docker:
      - image: circleci/android:api-26-node8-alpha
    environment:
      JVM_OPTS: -Xmx3200m
      KEYSTORE: goodcity.keystore
      # GOODCITY_KEYSTORE_ALIAS: "GoodCity App"
    steps:
      - restore-cache: *restore-repo-cache
      - restore-cache: *restore-yarn-cache
      - attach_workspace:
          at: ~/code
      - run:
          name: Setup Environment variables
          command: |
            echo 'export APP_NAME=$(if [ "$CIRCLE_BRANCH" == "live" ]; then echo App GoodCity; else echo S. App GoodCity; fi)' >> $BASH_ENV
            echo 'export APP_ID=$(if [ "$CIRCLE_BRANCH" == "live" ]; then echo hk.goodcity.app; else echo hk.goodcity.appstaging; fi)' >> $BASH_ENV
            echo 'export APP_VERSION=$(jq -r ".version" package.json)' >> $BASH_ENV
            echo 'export ENVIRONMENT=$(if [ "$CIRCLE_BRANCH" == "live" ]; then echo production; else echo staging; fi)' >> $BASH_ENV
            echo 'export PATH=$PATH:`yarn bin`' >> $BASH_ENV
            echo 'export BUILD=$(if [ "$CIRCLE_BRANCH" == "live" ]; then echo --release; else echo --debug; fi)' >> $BASH_ENV
            echo 'export PATH=$PATH:$ANDROID_HOME/tools/gradle/bin' >> $BASH_ENV
      - run: azure-filestore download -f ${KEYSTORE} && mv ${KEYSTORE} cordova/
      - run: azure-filestore download -d google-play -f ${GOOGLE_PLAY_KEY_FILE} && mv ${GOOGLE_PLAY_KEY_FILE} fastlane/
      - run:
          name: Print Environment variables
          command: |
            echo APP_NAME=$APP_NAME
            echo APP_ID=$APP_ID
            echo APP_VERSION=$APP_VERSION
            echo ENVIRONMENT=$ENVIRONMENT
            echo PATH=$PATH
            echo BUILD=$BUILD
      - run:
          name: Install Gradle 3.3
          command: |
            wget -O /tmp/gradle.zip https://downloads.gradle.org/distributions/gradle-3.3-bin.zip
            unzip -d $ANDROID_HOME/tools /tmp/gradle.zip
            mv $ANDROID_HOME/tools/gradle-3.3 $ANDROID_HOME/tools/gradle
      - run:
          name: Apply App settings
          command: cordova-update-config --appname ${APP_NAME} --appid ${APP_ID} --appversion ${APP_VERSION}
          working_directory: ~/code/cordova
      - run:
          name: Cordova Prepare
          command: cordova prepare android
          working_directory: ~/code/cordova
      - run:
          name: Cordova Compile
          command: |
            echo KEYSTORE=$KEYSTORE
            echo GOODCITY_KEYSTORE_ALIAS=$GOODCITY_KEYSTORE_ALIAS
            cordova compile android "${BUILD}" --device -- --keystore="${KEYSTORE}" --storePassword="${GOODCITY_KEYSTORE_PASSWORD}" --alias="${GOODCITY_KEYSTORE_ALIAS}" --password="${GOODCITY_KEYSTORE_PASSWORD}"
          working_directory: ~/code/cordova
      - store_artifacts:
          path: /home/circleci/code/cordova/platforms/android/build/outputs/apk/

  android_deploy:
    <<: *defaults
    docker:
      - image: circleci/ruby:2.5.1-node
    steps:
      - run: bundle exec fastlane android staging

  ios_build:
    macos:
      xcode: "9.2"
    working_directory: ~/code
    steps:
      - restore-cache: *restore-repo-cache
      - restore-cache: *restore-yarn-cache
      - attach_workspace:
          at: ~/code
      - run: mv dist-cordova/ cordova/www
      - run:
          name: Setup Environment variables
          command: |
            echo 'export APP_NAME=$(if [ "$CIRCLE_BRANCH" == "live" ]; then echo App GoodCity; else echo S. App GoodCity; fi)' >> $BASH_ENV
            echo 'export APP_ID=$(if [ "$CIRCLE_BRANCH" == "live" ]; then echo hk.goodcity.app; else echo hk.goodcity.appstaging; fi)' >> $BASH_ENV
            echo 'export APP_VERSION=$(jq -r ".version" package.json)' >> $BASH_ENV
            echo 'export ENVIRONMENT=$(if [ "$CIRCLE_BRANCH" == "live" ]; then echo production; else echo staging; fi)' >> $BASH_ENV
            echo 'export PATH=$PATH:`yarn bin`' >> $BASH_ENV
            echo 'export BUILD=$(if [ "$CIRCLE_BRANCH" == "live" ]; then echo --release; else echo --debug; fi)' >> $BASH_ENV
            echo 'export PROVISIONING_PROFILE=$(if [ "$CIRCLE_BRANCH" == "live" ]; then echo $PROVISIONING_PROFILE_PROD; else echo $PROVISIONING_PROFILE_STAGING; fi)' >> $BASH_ENV
      - run:
          name: Apply App settings
          command: cordova-update-config --appname "${APP_NAME}" --appid "${APP_ID}" --appversion "${APP_VERSION}"
          working_directory: cordova
      - run:
          name: Cordova Prepare
          command: cordova prepare ios
          working_directory: cordova
      - run:
          name: Cordova Compile
          command: cordova compile ios --device --codeSignIdentity='iPhone Developer' --developmentTeam=6B8FS8W94M --provisioningProfile=${PROVISIONING_PROFILE}
          working_directory: cordova

  ios_deploy:
    <<: *defaults
    steps:
      - run: echo "iOS deploy!"

  www_build:
    <<: *defaults
    environment:
        EMBER_CLI_CORDOVA: "0"
    steps:
      - restore-cache: *restore-repo-cache
      - restore-cache: *restore-yarn-cache
      - restore-cache: *restore-bower-cache
      - run:
          name: Setup Environment variables
          command: |
            echo 'export APP_SHA=$(echo $CIRCLE_SHA1 | cut -c1-7)' >> $BASH_ENV
            echo 'if [ -z "$APP_SHARED_SHA" ]; then export APP_SHARED_SHA=$( git ls-remote --heads https://github.com/crossroads/shared.goodcity.git $CIRCLE_BRANCH | cut -c1-7); fi' >> $BASH_ENV
            echo 'if [ -z "$APP_SHARED_SHA" ]; then export APP_SHARED_SHA=$( git ls-remote --heads https://github.com/crossroads/shared.goodcity.git master | cut -c1-7); fi' >> $BASH_ENV
            echo 'export staging=$(if [ "$CIRCLE_BRANCH" == "live" ]; then echo false; else echo true; fi)' >> $BASH_ENV
      - run:
          name: Print Environment Variables
          command: |
            echo EMBER_CLI_CORDOVA=$EMBER_CLI_CORDOVA
            echo APP_SHA=$APP_SHA
            echo APP_SHARED_SHA=$APP_SHARED_SHA
            echo staging=$staging
      - run: yarn run ember build --environment=production
      - run: mv dist/ dist-www
      - persist_to_workspace:
          root: .
          paths:
            - dist-www/

  www_deploy:
    <<: *defaults
    docker:
      - image: circleci/ruby:2.5.1-node
    steps:
      - restore-cache: *restore-repo-cache
      - restore-cache: *restore-bundler-cache
      - run: bundle check --path=vendor/bundle || bundle install --deployment --jobs=4 --retry=3
      - save-cache: *save-bundler-cache
      - attach_workspace:
          at: ~/code
      - run: mv dist-www/ dist
      - run:
          name: Setup Environment
          command: |
            echo 'export STAGE=$(if [ "$CIRCLE_BRANCH" == "live" ]; then echo production; else echo staging; fi)' >> $BASH_ENV
            echo 'export APP_VERSION=$(jq -r ".version" package.json)' >> $BASH_ENV
      - run:
          name: Print Environment Variables
          command: |
            echo STAGE=$STAGE
            echo APP_VERSION=$APP_VERSION
      - run: bundle exec cap $STAGE deploy:upload
      - run:
          name: Upload Source Map to Rollbar
          command: |
            curl https://api.rollbar.com/api/1/sourcemap/download -F access_token="${ROLLBAR_ACCESS_TOKEN}" -F version="${APP_VERSION}" -F minified_url=https://app-staging.goodcity.hk/assets/goodcity.js
workflows:
  version: 2
  build-test-and-deploy:
    jobs:
      - checkout_code
      - package_dependencies:
          requires:
            - checkout_code
      # - tests:
      #     requires:
      #       - package_dependencies
      # - upload-coverage:
      #     requires:
      #       - package_dependencies
      #       - tests
      - ember_cordova_build:
          requires:
            - package_dependencies
            # - tests
          filters:
            branches:
              only: /^(master|live|GCW-2115-circleci-2.0)$/
      - android_build:
          requires:
            # - tests
            - ember_cordova_build
          context: goodcity
          filters:
            branches:
              only: /^(master|live|GCW-2115-circleci-2.0)$/
      # - android_deploy:
      #     requires:
      #       - android_build
      #       - tests
      # - ios_build:
      #     requires:
      #       - ember_cordova_build
      #     filters:
      #       branches:
      #         only: /^(master|live|GCW-2115-circleci-2.0)$/
      # - ios_deploy:
      #     requires:
      #       - ios_build
      #       # - tests
      #     filters:
      #       branches:
      #         only: /^(master|live|GCW-2115-circleci-2.0)$/
      # - www_build:
      #     requires:
      #       - package_dependencies #tests
      #     filters:
      #       branches:
      #         only: /^(master|live)$/
      # - www_deploy:
      #     requires:
      #       - www_build
      #     filters:
      #       branches:
      #         only: /^(master|live)$/
